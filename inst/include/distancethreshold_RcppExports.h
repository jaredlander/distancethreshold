// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_distancethreshold_RCPPEXPORTS_H_GEN_
#define RCPP_distancethreshold_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace distancethreshold {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("distancethreshold", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("distancethreshold", "_distancethreshold_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in distancethreshold");
            }
        }
    }

    inline List threshold_distance(DataFrame obj, double threshold, CharacterVector cols = CharacterVector("x", "y"), String id_col = "ID", bool check_id = TRUE, String distance_type = "euclidean") {
        typedef SEXP(*Ptr_threshold_distance)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_threshold_distance p_threshold_distance = NULL;
        if (p_threshold_distance == NULL) {
            validateSignature("List(*threshold_distance)(DataFrame,double,CharacterVector,String,bool,String)");
            p_threshold_distance = (Ptr_threshold_distance)R_GetCCallable("distancethreshold", "_distancethreshold_threshold_distance");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_threshold_distance(Shield<SEXP>(Rcpp::wrap(obj)), Shield<SEXP>(Rcpp::wrap(threshold)), Shield<SEXP>(Rcpp::wrap(cols)), Shield<SEXP>(Rcpp::wrap(id_col)), Shield<SEXP>(Rcpp::wrap(check_id)), Shield<SEXP>(Rcpp::wrap(distance_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List threshold_distance2(DataFrame left_obj, DataFrame right_obj, double threshold, CharacterVector cols = CharacterVector("x", "y"), String distance_type = "euclidean") {
        typedef SEXP(*Ptr_threshold_distance2)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_threshold_distance2 p_threshold_distance2 = NULL;
        if (p_threshold_distance2 == NULL) {
            validateSignature("List(*threshold_distance2)(DataFrame,DataFrame,double,CharacterVector,String)");
            p_threshold_distance2 = (Ptr_threshold_distance2)R_GetCCallable("distancethreshold", "_distancethreshold_threshold_distance2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_threshold_distance2(Shield<SEXP>(Rcpp::wrap(left_obj)), Shield<SEXP>(Rcpp::wrap(right_obj)), Shield<SEXP>(Rcpp::wrap(threshold)), Shield<SEXP>(Rcpp::wrap(cols)), Shield<SEXP>(Rcpp::wrap(distance_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_distancethreshold_RCPPEXPORTS_H_GEN_
